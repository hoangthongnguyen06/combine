"""Create tables

Revision ID: 8b749e38a88d
Revises: 
Create Date: 2024-07-16 14:48:26.741444

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '8b749e38a88d'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('TCTT_Channel')
    op.drop_table('spatial_ref_sys')
    op.drop_table('TCTT_Channel_posts')
    with op.batch_alter_table('TCTT_Object', schema=None) as batch_op:
        batch_op.add_column(sa.Column('keys', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('longitude', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('date', sa.Date(), nullable=True))
        batch_op.alter_column('id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(),
               nullable=False)
        batch_op.alter_column('province',
               existing_type=sa.VARCHAR(),
               type_=sa.Integer(),
               existing_nullable=True)
        batch_op.alter_column('district',
               existing_type=sa.VARCHAR(),
               type_=sa.Integer(),
               existing_nullable=True)
        batch_op.alter_column('ward',
               existing_type=sa.VARCHAR(),
               type_=sa.Integer(),
               existing_nullable=True)
        batch_op.drop_column('keyword')
        batch_op.drop_column('longtitude')
        batch_op.drop_column('created_at')
        batch_op.drop_column('zoom')
        batch_op.drop_column('assign')

    with op.batch_alter_table('TCTT_Posts', schema=None) as batch_op:
        batch_op.create_foreign_key(None, 'TCTT_Target', ['account_id'], ['id'])

    with op.batch_alter_table('TCTT_Result', schema=None) as batch_op:
        batch_op.add_column(sa.Column('bots_number', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('type', sa.String(length=20), nullable=True))
        batch_op.alter_column('id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
        batch_op.alter_column('completed_time',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.Time(),
               existing_nullable=True)
        batch_op.create_foreign_key(None, 'TCTT_Posts', ['post_id'], ['id'])
        batch_op.create_foreign_key(None, 'TCTT_Target', ['account_id'], ['id'])
        batch_op.drop_column('created_at')
        batch_op.drop_column('bots')

    with op.batch_alter_table('TCTT_Target', schema=None) as batch_op:
        batch_op.add_column(sa.Column('sex', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('birthday', sa.Date(), nullable=True))
        batch_op.add_column(sa.Column('domain', sa.String(), nullable=False))
        batch_op.add_column(sa.Column('date', sa.Date(), nullable=True))
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(),
               nullable=False)
        batch_op.alter_column('status',
               existing_type=sa.VARCHAR(),
               nullable=False)
        batch_op.alter_column('state',
               existing_type=sa.VARCHAR(),
               nullable=False)
        batch_op.alter_column('type',
               existing_type=sa.VARCHAR(),
               nullable=False)
        batch_op.drop_column('platform')
        batch_op.drop_column('gender')
        batch_op.drop_column('uid')
        batch_op.drop_column('created_at')
        batch_op.drop_column('religion')
        batch_op.drop_column('assign')

    with op.batch_alter_table('TCTT_Topic', schema=None) as batch_op:
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(),
               nullable=False)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.Date(),
               nullable=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('TCTT_Topic', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=sa.Date(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(),
               nullable=True)

    with op.batch_alter_table('TCTT_Target', schema=None) as batch_op:
        batch_op.add_column(sa.Column('assign', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('religion', sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('uid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('gender', sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('platform', sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.alter_column('type',
               existing_type=sa.VARCHAR(),
               nullable=True)
        batch_op.alter_column('state',
               existing_type=sa.VARCHAR(),
               nullable=True)
        batch_op.alter_column('status',
               existing_type=sa.VARCHAR(),
               nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(),
               nullable=True)
        batch_op.drop_column('date')
        batch_op.drop_column('domain')
        batch_op.drop_column('birthday')
        batch_op.drop_column('sex')

    with op.batch_alter_table('TCTT_Result', schema=None) as batch_op:
        batch_op.add_column(sa.Column('bots', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.alter_column('completed_time',
               existing_type=sa.Time(),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
        batch_op.alter_column('id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
        batch_op.drop_column('type')
        batch_op.drop_column('bots_number')

    with op.batch_alter_table('TCTT_Posts', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')

    with op.batch_alter_table('TCTT_Object', schema=None) as batch_op:
        batch_op.add_column(sa.Column('assign', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('zoom', sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('longtitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('keyword', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
        batch_op.alter_column('ward',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
        batch_op.alter_column('district',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
        batch_op.alter_column('province',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(),
               nullable=True)
        batch_op.alter_column('id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
        batch_op.drop_column('date')
        batch_op.drop_column('longitude')
        batch_op.drop_column('keys')

    op.create_table('TCTT_Channel_posts',
    sa.Column('uid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('channel_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('likes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('uid', name='tctt_channel_posts_pkey')
    )
    op.create_table('spatial_ref_sys',
    sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.CheckConstraint('srid > 0 AND srid <= 998999', name='spatial_ref_sys_srid_check'),
    sa.PrimaryKeyConstraint('srid', name='spatial_ref_sys_pkey')
    )
    op.create_table('TCTT_Channel',
    sa.Column('uid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('platform', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('assign', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('link', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('likes_sub', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('uid', name='tctt_channel_pkey')
    )
    # ### end Alembic commands ###
